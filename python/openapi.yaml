openapi: 3.0.3
info:
  title: Root Signals API
  version: 1.0.0 (latest)
  description: Root Signals JSON API provides a way to access Root Signals using provisioned
    API token
paths:
  /v1/datasets/:
    get:
      operationId: datasets_list
      description: List datasets.
      parameters:
      - name: cursor
        required: false
        in: query
        description: The pagination cursor value.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
          default: ''
        description: Search for dataset by name
      - in: query
        name: type
        schema:
          type: string
          default: ''
        description: 'Filter by type. Possible values: reference, test'
      tags:
      - datasets
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDataSetListList'
          description: ''
    post:
      operationId: datasets_create
      description: Create a new dataset.
      tags:
      - datasets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSetCreateRequest'
            examples:
              CreateADataSetFromURL:
                value:
                  name: My data set
                  url: https://example.com
                summary: Create a data set from URL
              CreateADataSetFromAFile:
                value: !!set
                  ? "\n                        const formData = new FormData();\n\
                    \                        formData.append(\"file\", file);\n  \
                    \                      formData.append(\"type\", \"reference\"\
                    );\n                        const response = await fetch(`base_url/dataset/upload/`,\
                    \ {\n                        method: \"POST\",\n             \
                    \           body: formData,\n                        headers:\
                    \ {\n                            Authorization: `Api-Key ${api_key}`,\n\
                    \                        },\n                        });\n   \
                    \                 "
                  : null
                summary: Create a data set from a file
                description: Use a form post to upload a file.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DataSetCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DataSetCreateRequest'
      security:
      - publicApiKey: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetCreate'
          description: ''
  /v1/datasets/{id}/:
    get:
      operationId: datasets_retrieve
      description: Get dataset details or download the dataset file.
      parameters:
      - in: query
        name: download
        schema:
          type: boolean
          default: false
        description: Download the dataset.
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - datasets
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetList'
          description: ''
    delete:
      operationId: datasets_destroy
      description: Delete a dataset.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - datasets
      security:
      - publicApiKey: []
      responses:
        '204':
          description: No response body
  /v1/datasets/status/{id}/:
    put:
      operationId: datasets_status_update
      description: Change the status of a dataset
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - datasets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
            examples:
              ChangeDatasetStatus:
                value:
                  status: unlisted | listed
                summary: Change dataset status
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
        required: true
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusChange'
              examples:
                ChangeDatasetStatus:
                  value:
                    status: unlisted | listed
                  summary: Change dataset status
          description: ''
  /v1/evaluators/:
    get:
      operationId: evaluators_list
      description: List all evaluators. The response includes a 'requirements' field
        for each evaluator that specifies what parameters are required for execution.
        The requirements field indicates whether the evaluator requires request, response,
        contexts, functions, expected_output, or reference variables.
      parameters:
      - name: cursor
        required: false
        in: query
        description: The pagination cursor value.
        schema:
          type: string
      - in: query
        name: is_root_evaluator
        schema:
          type: boolean
          default: false
        description: Return only Root Signals defined evaluators.
      - in: query
        name: name
        schema:
          type: string
          default: ''
        description: Search for evaluators by name (exact match).
      - in: query
        name: objective__intent
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: owner__email
        schema:
          type: string
      - in: query
        name: owner__first_name
        schema:
          type: string
      - in: query
        name: owner__last_name
        schema:
          type: string
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
          default: ''
        description: Search for evaluators by name or description.
      - in: query
        name: skill_type
        schema:
          type: string
          enum:
          - managed
          - native
        description: |-
          * `managed` - managed
          * `native` - native
      - in: query
        name: status
        schema:
          type: string
          enum:
          - listed
          - public
          - public_unlisted
          - unlisted
        description: |-
          * `unlisted` - unlisted
          * `listed` - listed
          * `public` - public
          * `public_unlisted` - public_unlisted
      tags:
      - evaluators
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEvaluatorListOutputList'
          description: List of evaluators with their requirements
    post:
      operationId: evaluators_create
      description: Create a new evaluator.
      tags:
      - evaluators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluatorRequest'
            examples:
              CreateAnEvaluator:
                value:
                  prompt: Does the {{response}} contain ambiguous language?
                  name: Direct language
                  pii_filter: false
                  objective:
                    intent: Does the response contain ambiguous language?
                  models:
                  - gpt-4-turbo
                summary: Create an Evaluator
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EvaluatorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EvaluatorRequest'
        required: true
      security:
      - publicApiKey: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluator'
          description: ''
  /v1/evaluators/{id}/:
    get:
      operationId: evaluators_retrieve
      description: Get evaluator details. The response includes a 'requirements' field
        that specifies what parameters are required for execution. The requirements
        field indicates whether the evaluator requires request, response, contexts,
        functions, expected_output, or reference variables.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: query
        name: include_last_n_validator_results
        schema:
          type: integer
          default: 0
        description: Include the last N validator results for each validator in the
          response.
      - in: query
        name: version_id
        schema:
          type: string
          default: ''
        description: Get a specific version of the evaluator
      tags:
      - evaluators
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluator'
          description: Evaluator details with requirements information
    put:
      operationId: evaluators_update
      description: Update an evaluator.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - evaluators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluatorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EvaluatorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EvaluatorRequest'
        required: true
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluator'
          description: ''
    patch:
      operationId: evaluators_partial_update
      description: Update an evaluator. All fields are optional.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - evaluators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEvaluatorRequest'
            examples:
              UpdateASkillPrompt:
                value:
                  prompt: 'Please answer this {{question}}. Your answer here:'
                  input_variables:
                  - name: question
                summary: Update a skill prompt
              UpdateAnEvaluatorPrompt:
                value:
                  prompt: Does the {{response}} contain ambiguous language? Explain
                    your reasoning.
                  input_variables:
                  - name: response
                summary: Update an evaluator prompt
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEvaluatorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEvaluatorRequest'
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluator'
          description: ''
    delete:
      operationId: evaluators_destroy
      description: Delete an evaluator.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - evaluators
      security:
      - publicApiKey: []
      responses:
        '204':
          description: No response body
  /v1/evaluators/calibrate/:
    post:
      operationId: evaluators_calibrate_create
      description: Test an evaluator definition using calibration data
      tags:
      - evaluators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillTestInputRequest'
            examples:
              TestWithCalibrationData.:
                value:
                  test_data:
                  - - '1.0'
                    - '2'
                    - What is 1+1. Respond with a single digit number.
                  - - '0.34'
                    - The primary colors are red, blue, and green.
                    - What are the primary colors?
                  objective:
                    intent: 'Is the output relevant to the prompt? Evaluate for the
                      following criteria: accuracy, completeness, adherence to the
                      prompt, and logical consistency.'
                  prompt: Evaluate how well the {{response}} adheres to instructions
                    given in {{request}}.
                  name: Relevancy
                  models:
                  - gpt-4-turbo
                  is_evaluator: true
                summary: Test with calibration data.
                description: 'Calibration test_data must have columns in this order:
                  ''expected score'', ''text to evaluate (output)'', ''input''. Input
                  is optional.'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SkillTestInputRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SkillTestInputRequest'
        required: true
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EvaluatorCalibrationOutput'
          description: ''
  /v1/evaluators/calibrate/{id}:
    post:
      operationId: evaluators_calibrate_create_2
      description: Test an existing evaluator using calibration data
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - evaluators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillTestDataRequest'
            examples:
              TestWithCalibrationData.:
                value:
                  test_data:
                  - - '1.0'
                    - '2'
                    - What is 1+1. Respond with a single digit number.
                  - - '0.34'
                    - The primary colors are red, blue, and green.
                    - What are the primary colors?
                summary: Test with calibration data.
                description: 'Calibration test_data must have columns in this order:
                  ''expected score'', ''text to evaluate (output)'', ''input''. Input
                  is optional.'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SkillTestDataRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SkillTestDataRequest'
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EvaluatorCalibrationOutput'
          description: ''
  /v1/evaluators/duplicate/{id}/:
    post:
      operationId: evaluators_duplicate_create
      description: Duplicate an evaluator
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - evaluators
      security:
      - publicApiKey: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluator'
          description: ''
  /v1/evaluators/execute/{id}/:
    post:
      operationId: evaluators_execute_create
      description: Execute an evaluator. Check the evaluator's requirements to know
        which parameters are needed for execution.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          pattern: ^[0-9a-f-]+$
        required: true
      tags:
      - evaluators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluatorExecutionRequest'
            examples:
              ExecuteASimpleEvaluator(forExample,Precision):
                value:
                  request: Tell me a random fact
                  response: The reason the sky is blue is because of Rayleigh scattering.
                summary: Execute a simple evaluator (for example, Precision)
              ExecuteARAGEvaluator(forExample,AnswerCorrectness):
                value:
                  request: What was the revenue in Q1?
                  response: The revenue in Q1 was $1,000,000.
                  contexts:
                  - List of documents
                  - containing the company's financial reports
                summary: Execute a RAG evaluator (for example, Answer Correctness)
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EvaluatorExecutionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EvaluatorExecutionRequest'
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluatorExecutionResult'
          description: ''
  /v1/evaluators/execute/by-name/:
    post:
      operationId: evaluators_execute_by_name_create
      description: Execute an evaluator by name. Check the evaluator's requirements
        to know which parameters are needed for execution.
      parameters:
      - in: query
        name: name
        schema:
          type: string
        description: The name of the evaluator to execute
        required: true
      tags:
      - evaluators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluatorExecutionRequest'
            examples:
              ExecuteASimpleEvaluatorByName:
                value:
                  request: Tell me a random fact
                  response: The reason the sky is blue is because of Rayleigh scattering.
                summary: Execute a simple evaluator by name
              ExecuteARAGEvaluatorByName:
                value:
                  request: What was the revenue in Q1?
                  response: The revenue in Q1 was $1,000,000.
                  contexts:
                  - List of documents
                  - containing the company's financial reports
                summary: Execute a RAG evaluator by name
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EvaluatorExecutionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EvaluatorExecutionRequest'
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluatorExecutionResult'
          description: ''
  /v1/evaluators/status/{id}/:
    post:
      operationId: evaluators_status_create
      description: Change the status of an evaluator
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - evaluators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
        required: true
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusChange'
          description: ''
    put:
      operationId: evaluators_status_update
      description: Change the status of an evaluator
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - evaluators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
            examples:
              ChangeStatus:
                value:
                  status: unlisted | listed
                summary: Change status
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
        required: true
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusChange'
              examples:
                ChangeStatus:
                  value:
                    status: unlisted | listed
                  summary: Change status
          description: ''
  /v1/evaluators/versions/{id}/:
    get:
      operationId: evaluators_versions_list
      description: Get a list of all versions of an evaluator
      parameters:
      - name: cursor
        required: false
        in: query
        description: The pagination cursor value.
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: string
        required: true
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - evaluators
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEvaluatorList'
          description: ''
  /v1/execution-logs/:
    get:
      operationId: execution_logs_list
      description: Get a list of execution logs. An execution log is created every
        time a skill or an evaluator is executed.
      parameters:
      - name: cursor
        required: false
        in: query
        description: The pagination cursor value.
        schema:
          type: string
      - in: query
        name: date_from
        schema:
          type: string
          format: date-time
        description: Filter logs created after or at this datetime (inclusive)
      - in: query
        name: date_to
        schema:
          type: string
          format: date-time
        description: Filter logs created before or at this datetime (inclusive)
      - in: query
        name: executed_item_id
        schema:
          type: string
          format: uuid
      - in: query
        name: execution_type
        schema:
          type: string
          enum:
          - evaluator
          - experiment
          - judge
          - skill
        description: |-
          * `skill` - skill
          * `evaluator` - evaluator
          * `judge` - judge
          * `experiment` - experiment
      - in: query
        name: include
        schema:
          type: string
          default: ''
        description: 'Comma-separated list of additional fields to include in the
          response. Supports: llm_output, variables, evaluation_context'
      - in: query
        name: max_score
        schema:
          type: number
        description: Filter logs by maximum score, inclusive, excludes null scores
      - in: query
        name: min_score
        schema:
          type: number
        description: Filter logs by minimum score, inclusive, excludes null scores
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
          default: ''
        description: Filter with skill name or id
      - in: query
        name: tags
        schema:
          type: string
          default: ''
        description: Filter logs by tag names (comma-separated)
      - in: query
        name: unique_skills
        schema:
          type: boolean
          default: false
        description: Return only unique skills
      tags:
      - execution-logs
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExecutionLogListList'
          description: ''
  /v1/execution-logs/{log_id}/:
    get:
      operationId: execution_logs_retrieve
      description: Get the full details of a single execution log.
      parameters:
      - in: path
        name: log_id
        schema:
          type: string
        required: true
      tags:
      - execution-logs
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionLogDetails'
          description: ''
  /v1/judges/:
    get:
      operationId: judges_list
      description: List all accessible judges. Filters can be applied to narrow down
        the results.
      parameters:
      - name: cursor
        required: false
        in: query
        description: The pagination cursor value.
        schema:
          type: string
      - in: query
        name: is_preset
        schema:
          type: boolean
        description: Filter by is the judge preset or not
      - in: query
        name: is_public
        schema:
          type: boolean
        description: Filter by is the judge public or not
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
        description: Search for judge by name, intent...
      tags:
      - judges
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJudgeListList'
          description: ''
    post:
      operationId: judges_create
      description: Create a new judge with a name, intent, and list of evaluators.
      tags:
      - judges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JudgeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JudgeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JudgeRequest'
        required: true
      security:
      - publicApiKey: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Judge'
          description: ''
  /v1/judges/{judge_id}/execute/:
    post:
      operationId: judges_execute_create
      description: Execute a Judge. Judges that have a file will use it as a context
        automatically. See examples how to overwrite the context.
      parameters:
      - in: path
        name: judge_id
        schema:
          type: string
        required: true
      tags:
      - judges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JudgeExecutionRequest'
            examples:
              SimpleExample:
                value:
                  request: Tell me about a subject
                  response: As an LLM, I will tell you about a subject
                  tags:
                  - dev
                summary: Simple example
              ExampleWithAContext:
                value:
                  request: Can I get a refund for my purchase?
                  response: You can get a refund if you have a receipt and the product
                    is in good condition.
                  contexts:
                  - Here is a policy document containing information about the returns
                    policy. Users can return products...
                summary: Example with a context
                description: The context is a list of strings that will be used to
                  help the LLM answer the question.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JudgeExecutionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JudgeExecutionRequest'
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JudgeExecutionResponse'
          description: ''
  /v1/judges/{judge_id}/openai/chat/completions:
    post:
      operationId: judges_openai_chat_completions_create_2
      description: OpenAI compatible endpoint for running a judge on a LLM interaction.
        See https://platform.openai.com/docs/api-reference/chat/create for more information.
      parameters:
      - in: query
        name: async_judge
        schema:
          type: boolean
        description: Whether to run judge evaluation asynchronously. When true, returns
          completion response immediately without waiting for judge evaluation. Defaults
          to false.
      - in: path
        name: judge_id
        schema:
          type: string
        required: true
      - in: query
        name: rs_metadata
        schema:
          type: boolean
        description: Whether to include evaluator results in the response metadata.
          Defaults to true.
      tags:
      - judges
      responses:
        '200':
          description: No response body
  /v1/judges/{judge_id}/refine/:
    post:
      operationId: judges_refine_create
      description: Execute a judge as rectifier to improve the response. The rectifier
        will analyze the original response using the judge's evaluators and attempt
        to improve it based on their feedback.
      parameters:
      - in: path
        name: judge_id
        schema:
          type: string
        required: true
      tags:
      - judges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JudgeRectifierRequestRequest'
            examples:
              ImproveResponseQuality:
                value:
                  request: What is Python programming language?
                  response: Python is a programming language.
                  contexts:
                  - The response should be detailed and mention key features.
                  tags:
                  - improve_clarity
                  - add_details
                summary: Improve response quality
                description: Request to improve a basic response by adding more details
                  and clarity
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JudgeRectifierRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JudgeRectifierRequestRequest'
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JudgeRectifierResponse'
              examples:
                ExampleSuccessfulResponse:
                  value:
                    improved_response: Python is a high-level, interpreted programming
                      language known for its simplicity and readability. It supports
                      multiple programming paradigms including procedural, object-oriented,
                      and functional programming. Python is widely used in web development,
                      data science, artificial intelligence, and automation.
                    original_response: Python is a programming language.
                    original_evaluator_results:
                    - evaluator_name: Clarity
                      score: 0.8
                      justification: The response is clear but lacks detail
                      evaluator_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      evaluator_version_id: 3fa85f64-5717-4562-b3fc-2c963f66afa7
                    evaluator_results:
                    - evaluator_name: Clarity
                      score: 0.95
                      justification: The response is clear, detailed and informative
                      evaluator_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                      evaluator_version_id: 3fa85f64-5717-4562-b3fc-2c963f66afa7
                  summary: Example successful response
                  description: Example of a successful response showing improvement
                    in clarity and detail
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Validation error - missing required fields or invalid
                  input
          description: ''
        '403':
          content:
            application/json:
              schema:
                description: Permission denied - user does not have access to the
                  judge
              examples:
                PermissionDenied:
                  value:
                    type: about:blank
                    status: 403
                    title: Permission denied.
                    detail: You do not have permission to perform this action.
                    instance: null
                    code: permission_denied
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Judge not found
              examples:
                NotFound:
                  value:
                    type: about:blank
                    status: 404
                    title: Not found.
                    detail: Not found.
                    instance: null
                    code: not_found
          description: ''
  /v1/judges/{judge_id}/refine/openai/chat/completions:
    post:
      operationId: judges_refine_openai_chat_completions_create
      description: OpenAI compatible endpoint for running a LLM interaction and refining
        the response using a judge. See https://platform.openai.com/docs/api-reference/chat/create
        for more information.
      parameters:
      - in: path
        name: judge_id
        schema:
          type: string
        required: true
      - in: query
        name: rs_metadata
        schema:
          type: boolean
        description: Whether to include evaluator results in the response metadata.
          Defaults to true.
      tags:
      - judges
      responses:
        '200':
          description: No response body
  /v1/judges/{id}/:
    get:
      operationId: judges_retrieve
      description: Retrieve a specific judge by its ID.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this judge.
        required: true
      tags:
      - judges
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Judge'
          description: ''
    put:
      operationId: judges_update
      description: Update an existing judge.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this judge.
        required: true
      tags:
      - judges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JudgeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JudgeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JudgeRequest'
        required: true
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Judge'
          description: ''
    patch:
      operationId: judges_partial_update
      description: Partially update an existing judge.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this judge.
        required: true
      tags:
      - judges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedJudgeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedJudgeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedJudgeRequest'
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Judge'
          description: ''
    delete:
      operationId: judges_destroy
      description: Delete a judge.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this judge.
        required: true
      tags:
      - judges
      security:
      - publicApiKey: []
      responses:
        '204':
          description: No response body
  /v1/judges/{id}/duplicate/:
    post:
      operationId: judges_duplicate_create
      description: Copy a judge to user
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this judge.
        required: true
      tags:
      - judges
      security:
      - publicApiKey: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Judge'
          description: ''
  /v1/judges/{id}/invite/:
    post:
      operationId: judges_invite_create
      description: Send email invites to view a specific judge (up to 10 recipients)
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this judge.
        required: true
      tags:
      - judges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JudgeInviteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JudgeInviteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JudgeInviteRequest'
        required: true
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Invitations sent successfully
          description: ''
  /v1/judges/execute/by-name/:
    post:
      operationId: judges_execute_by_name_create
      description: Execute a judge by name. Judges that have a file will use it as
        a context automatically. See examples how to overwrite the context.
      parameters:
      - in: query
        name: name
        schema:
          type: string
        description: The name of the judge to execute
        required: true
      tags:
      - judges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JudgeExecutionRequest'
            examples:
              ExecuteASimpleJudgeByName:
                value:
                  request: Tell me about a subject
                  response: As an LLM, I will tell you about a subject
                  tags:
                  - dev
                summary: Execute a simple judge by name
              ExecuteAJudgeByNameWithContext:
                value:
                  request: Can I get a refund for my purchase?
                  response: You can get a refund if you have a receipt and the product
                    is in good condition.
                  contexts:
                  - Here is a policy document containing information about the returns
                    policy. Users can return products...
                summary: Execute a judge by name with context
                description: The context is a list of strings that will be used to
                  help the LLM answer the question.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JudgeExecutionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JudgeExecutionRequest'
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JudgeExecutionResponse'
          description: ''
  /v1/judges/generate/:
    post:
      operationId: judges_generate_create
      description: Generate a judge
      tags:
      - judges
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JudgeGeneratorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/JudgeGeneratorRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/JudgeGeneratorRequest'
        required: true
      security:
      - publicApiKey: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JudgeGeneratorResponse'
          description: ''
  /v1/judges/openai/chat/completions:
    post:
      operationId: judges_openai_chat_completions_create
      description: OpenAI compatible endpoint for running a judge on a LLM interaction.
        See https://platform.openai.com/docs/api-reference/chat/create for more information.
      parameters:
      - in: query
        name: async_judge
        schema:
          type: boolean
        description: Whether to run judge evaluation asynchronously. When true, returns
          completion response immediately without waiting for judge evaluation. Defaults
          to false.
      - in: query
        name: rs_metadata
        schema:
          type: boolean
        description: Whether to include evaluator results in the response metadata.
          Defaults to true.
      tags:
      - judges
      responses:
        '200':
          description: No response body
  /v1/models/:
    get:
      operationId: models_list
      description: Get all available LLM models.
      parameters:
      - in: query
        name: capable_of
        schema:
          type: array
          items:
            type: string
        description: Search for models by capabilities.
        explode: false
        style: form
      - name: cursor
        required: false
        in: query
        description: The pagination cursor value.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - models
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedModelListList'
          description: ''
    post:
      operationId: models_create
      description: Create a custom LLM model.
      tags:
      - models
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelRequest'
            examples:
              CreateACustomLLMExecutionModel(SaaS):
                value:
                  default_key: something secret
                  model: gpt-4-turbo
                  name: my-custom-gpt
                summary: Create a custom LLM execution model (SaaS)
                description: An example showing model with name my-custom-gpt, but
                  using SaaS service.
              CreateACustomLLMExecutionModel(non-SaaS):
                value:
                  default_key: something secret
                  model: azure/gpt-4-turbo
                  name: azure/gpt-4-turbo
                  url: https://azure-openai-somewhere.openai.azure.com
                summary: Create a custom LLM execution model (non-SaaS)
                description: An example with non-SaaS LLM model.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ModelRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ModelRequest'
        required: true
      security:
      - publicApiKey: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: ''
  /v1/models/{id}/:
    get:
      operationId: models_retrieve
      description: Get model details.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this model.
        required: true
      tags:
      - models
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: ''
    put:
      operationId: models_update
      description: Update a custom LLM model.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this model.
        required: true
      tags:
      - models
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ModelRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ModelRequest'
        required: true
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: ''
    patch:
      operationId: models_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this model.
        required: true
      tags:
      - models
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedModelRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedModelRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedModelRequest'
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: ''
    delete:
      operationId: models_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this model.
        required: true
      tags:
      - models
      security:
      - publicApiKey: []
      responses:
        '204':
          description: No response body
  /v1/objectives/:
    get:
      operationId: objectives_list
      description: List Objective definitions.
      parameters:
      - name: cursor
        required: false
        in: query
        description: The pagination cursor value.
        schema:
          type: string
      - in: query
        name: has_validators
        schema:
          type: boolean
        description: Filter objectives by whether they have validators.
      - in: query
        name: intent
        schema:
          type: string
          default: ''
        description: Search for objectives by intent (exact match).
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
          default: ''
        description: Search for objectives by intent.
      tags:
      - objectives
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedObjectiveListList'
          description: ''
    post:
      operationId: objectives_create
      description: Create an Objective definition.
      tags:
      - objectives
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectiveRequest'
            examples:
              CreateAnObjectiveDefinition:
                value:
                  intent: Answer a question based on job title
                  validators:
                  - threshold: '0.9'
                    evaluator_name: Clarity
                  - evaluator_name: Precision
                summary: Create an Objective definition
                description: Create an Objective, which defines the intent of the
                  skills which match it, as well as the requirement that the answers
                  should be of high clarity (0.9 is required threshold), and the results
                  will be also evaluated for precision but that information is just
                  gathered for informational purposes
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ObjectiveRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ObjectiveRequest'
      security:
      - publicApiKey: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
          description: ''
  /v1/objectives/{id}/:
    get:
      operationId: objectives_retrieve
      description: Get an Objective definition details.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - objectives
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Objective'
          description: ''
    put:
      operationId: objectives_update
      description: Update an Objective definition.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - objectives
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectiveRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ObjectiveRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ObjectiveRequest'
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Objective'
          description: ''
    patch:
      operationId: objectives_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - objectives
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedObjectiveRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedObjectiveRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedObjectiveRequest'
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Objective'
          description: ''
    delete:
      operationId: objectives_destroy
      description: Delete an Objective definition.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - objectives
      security:
      - publicApiKey: []
      responses:
        '204':
          description: No response body
  /v1/objectives/versions/{id}/:
    get:
      operationId: objectives_versions_list
      parameters:
      - name: cursor
        required: false
        in: query
        description: The pagination cursor value.
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: string
        required: true
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - objectives
      security:
      - publicApiKey: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedObjectiveList'
          description: ''
components:
  schemas:
    DataSetCreate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          nullable: true
        file:
          type: string
          format: uri
        type:
          $ref: '#/components/schemas/DataSetType'
        url:
          type: string
          format: uri
        tags:
          type: array
          items:
            type: string
            format: uuid
        owner:
          allOf:
          - $ref: '#/components/schemas/NestedUserDetails'
          readOnly: true
        has_header:
          type: boolean
          default: false
      required:
      - id
      - owner
    DataSetCreateRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
          minLength: 1
        file:
          type: string
          format: binary
        draft_id:
          type: string
          format: uuid
          writeOnly: true
        type:
          $ref: '#/components/schemas/DataSetType'
        url:
          type: string
          format: uri
          minLength: 1
        tags:
          type: array
          items:
            type: string
            format: uuid
        has_header:
          type: boolean
          default: false
    DataSetList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/DataSetType'
        tags:
          type: array
          items:
            type: string
            format: uuid
        owner:
          allOf:
          - $ref: '#/components/schemas/NestedUserDetails'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        _meta:
          readOnly: true
          title: ' meta'
      required:
      - _meta
      - created_at
      - id
      - owner
    DataSetType:
      enum:
      - reference
      - test
      type: string
      description: |-
        * `reference` - REFERENCE
        * `test` - TEST
    DatasetRangeRequest:
      type: object
      properties:
        start:
          type: integer
          minimum: 0
          nullable: true
        end:
          type: integer
          minimum: 0
          nullable: true
      required:
      - end
      - start
    Evaluator:
      type: object
      properties:
        change_note:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        evaluator_demonstrations:
          type: array
          items:
            $ref: '#/components/schemas/EvaluatorDemonstrations'
          nullable: true
        id:
          type: string
          format: uuid
          readOnly: true
        input_variables:
          type: array
          items:
            $ref: '#/components/schemas/InputVariable'
        model_params:
          allOf:
          - $ref: '#/components/schemas/ModelParams'
          nullable: true
        models:
          type: array
          items:
            type: string
          description: Primary model (index 0) and an optional list of fallback models
            to use if the primary model is not available. If not provided, a default
            model will be used.
        name:
          type: string
          maxLength: 1000
          minLength: 2
        objective:
          allOf:
          - $ref: '#/components/schemas/Objective'
          readOnly: true
          nullable: true
        owner:
          allOf:
          - $ref: '#/components/schemas/NestedUserDetails'
          readOnly: true
        prompt:
          type: string
          maxLength: 100000
        reference_variables:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceVariable'
        skill_type:
          allOf:
          - $ref: '#/components/schemas/SkillTypeEnum'
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        system_message:
          type: string
        updated_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        updated_by:
          allOf:
          - $ref: '#/components/schemas/NestedUserDetails'
          readOnly: true
          nullable: true
        version_id:
          type: string
          format: uuid
          readOnly: true
        _meta:
          readOnly: true
          title: ' meta'
        inputs:
          type: object
          description: Schema defining the input parameters required for execution.
            The schema consists of variables defined in the prompt template (predicate)
            and special variables like functions, contexts, and expected output.
          additionalProperties:
            type: object
            required:
            - type
            properties:
              type:
                type: string
                enum:
                - string
                - array
              items:
                type: object
                required:
                - type
                properties:
                  type:
                    type: string
                    enum:
                    - string
                    - object
          example:
            response:
              type: string
            functions:
              type: array
              items:
                type: object
            contexts:
              type: array
              items:
                type: string
            my_custom_variable:
              type: string
          readOnly: true
      required:
      - _meta
      - created_at
      - id
      - inputs
      - name
      - objective
      - owner
      - prompt
      - skill_type
      - updated_at
      - updated_by
      - version_id
    EvaluatorCalibrationOutput:
      type: object
      properties:
        variables:
          type: object
          additionalProperties: {}
        model_call_duration:
          type: number
          format: double
          description: Deprecated, use result.model_call_duration instead.
        row_number:
          type: integer
        result:
          $ref: '#/components/schemas/EvaluatorCalibrationResult'
      required:
      - result
      - row_number
      - variables
    EvaluatorCalibrationResult:
      type: object
      properties:
        llm_output:
          type: string
        model:
          type: string
          readOnly: true
        execution_log_id:
          type: string
        rendered_prompt:
          type: string
          readOnly: true
        cost:
          type: number
          format: double
          nullable: true
        model_call_duration:
          type: number
          format: double
        expected_score:
          type: number
          format: double
        score:
          type: number
          format: double
          nullable: true
        justification:
          type: string
          nullable: true
      required:
      - cost
      - execution_log_id
      - expected_score
      - llm_output
      - model
      - rendered_prompt
      - score
    EvaluatorDemonstrations:
      type: object
      properties:
        request:
          type: string
          nullable: true
        response:
          type: string
          nullable: true
        score:
          type: number
          format: double
          maximum: 1
          minimum: 0
        justification:
          type: string
          nullable: true
      required:
      - score
    EvaluatorDemonstrationsRequest:
      type: object
      properties:
        request:
          type: string
          nullable: true
        response:
          type: string
          nullable: true
        score:
          type: number
          format: double
          maximum: 1
          minimum: 0
        justification:
          type: string
          nullable: true
      required:
      - score
    EvaluatorExecutionFunctionParameterPropertyRequest:
      type: object
      properties:
        type:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        items:
          type: object
          additionalProperties: {}
      required:
      - type
    EvaluatorExecutionFunctionParameterRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/EvaluatorExecutionFunctionParameterTypeEnum'
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/EvaluatorExecutionFunctionParameterPropertyRequest'
        required:
          type: array
          items:
            type: string
            minLength: 1
      required:
      - type
    EvaluatorExecutionFunctionParameterTypeEnum:
      enum:
      - object
      type: string
      description: '* `object` - Object'
    EvaluatorExecutionFunctionRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        parameters:
          $ref: '#/components/schemas/EvaluatorExecutionFunctionParameterRequest'
        description:
          type: string
          minLength: 1
      required:
      - name
      - parameters
    EvaluatorExecutionFunctionsRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/EvaluatorExecutionFunctionsTypeEnum'
        function:
          $ref: '#/components/schemas/EvaluatorExecutionFunctionRequest'
      required:
      - function
      - type
    EvaluatorExecutionFunctionsTypeEnum:
      enum:
      - function
      type: string
      description: '* `function` - Function'
    EvaluatorExecutionRequest:
      type: object
      properties:
        request:
          type: string
          default: ''
        response:
          type: string
          default: ''
        contexts:
          type: array
          items:
            type: string
            minLength: 1
        functions:
          type: array
          items:
            $ref: '#/components/schemas/EvaluatorExecutionFunctionsRequest'
        expected_output:
          type: string
          nullable: true
          maxLength: 3500000
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 1000
        evaluator_version_id:
          type: string
          nullable: true
        variables:
          type: object
          additionalProperties:
            type: string
            minLength: 1
          default: {}
          description: Extra variables to be used in the execution of the evaluator.
            Optional.
    EvaluatorExecutionResult:
      type: object
      properties:
        evaluator_name:
          type: string
          nullable: true
        score:
          type: number
          format: double
          nullable: true
        cost:
          type: number
          format: double
          nullable: true
        execution_log_id:
          type: string
        justification:
          type: string
          nullable: true
      required:
      - cost
      - evaluator_name
      - execution_log_id
      - justification
      - score
    EvaluatorListOutput:
      type: object
      properties:
        _meta:
          readOnly: true
          title: ' meta'
        created_at:
          type: string
          format: date-time
          readOnly: true
        models:
          type: array
          items:
            type: string
          readOnly: true
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          readOnly: true
        objective:
          allOf:
          - $ref: '#/components/schemas/NestedObjectiveList'
          readOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/NestedUserDetails'
          readOnly: true
        prompt:
          type: string
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        updated_by:
          allOf:
          - $ref: '#/components/schemas/NestedUserDetails'
          readOnly: true
          nullable: true
        version_id:
          type: string
          readOnly: true
        inputs:
          type: object
          description: Schema defining the input parameters required for execution.
            The schema consists of variables defined in the prompt template (predicate)
            and special variables like functions, contexts, and expected output.
          additionalProperties:
            type: object
            required:
            - type
            properties:
              type:
                type: string
                enum:
                - string
                - array
              items:
                type: object
                required:
                - type
                properties:
                  type:
                    type: string
                    enum:
                    - string
                    - object
          example:
            response:
              type: string
            functions:
              type: array
              items:
                type: object
            contexts:
              type: array
              items:
                type: string
            my_custom_variable:
              type: string
          readOnly: true
      required:
      - _meta
      - created_at
      - id
      - inputs
      - models
      - name
      - objective
      - owner
      - prompt
      - status
      - updated_at
      - updated_by
      - version_id
    EvaluatorReference:
      type: object
      properties:
        id:
          type: string
          format: uuid
        version_id:
          type: string
          format: uuid
          nullable: true
          description: Optional version ID. If not provided, the latest version will
            be tracked.
      required:
      - id
    EvaluatorReferenceRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        version_id:
          type: string
          format: uuid
          nullable: true
          description: Optional version ID. If not provided, the latest version will
            be tracked.
      required:
      - id
    EvaluatorRequest:
      type: object
      properties:
        change_note:
          type: string
          nullable: true
        evaluator_demonstrations:
          type: array
          items:
            $ref: '#/components/schemas/EvaluatorDemonstrationsRequest'
          nullable: true
        input_variables:
          type: array
          items:
            $ref: '#/components/schemas/InputVariableRequest'
        model_params:
          allOf:
          - $ref: '#/components/schemas/ModelParamsRequest'
          nullable: true
        models:
          type: array
          items:
            type: string
            minLength: 1
          description: Primary model (index 0) and an optional list of fallback models
            to use if the primary model is not available. If not provided, a default
            model will be used.
        name:
          type: string
          minLength: 2
          maxLength: 1000
        objective_id:
          type: string
          format: uuid
          writeOnly: true
        objective_version_id:
          type: string
          format: uuid
          writeOnly: true
          nullable: true
          description: Optionally pin the Skill to a specific version of an Objective.
            If not provided, the latest version of the objective will be used and
            followed.
        overwrite:
          type: boolean
          writeOnly: true
          default: false
          description: Overwrite existing skill with the same name. Only for POST
            requests.
        prompt:
          type: string
          minLength: 1
          maxLength: 100000
        reference_variables:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceVariableRequest'
        status:
          $ref: '#/components/schemas/StatusEnum'
        system_message:
          type: string
      required:
      - name
      - objective_id
      - prompt
    EvaluatorResult:
      type: object
      properties:
        evaluator_name:
          type: string
        score:
          type: number
          format: double
          nullable: true
        justification:
          type: string
          nullable: true
        evaluator_id:
          type: string
          format: uuid
        evaluator_version_id:
          type: string
          format: uuid
      required:
      - evaluator_id
      - evaluator_name
      - evaluator_version_id
      - justification
      - score
    ExecutionLogDetails:
      type: object
      properties:
        chat_id:
          type: string
          readOnly: true
          nullable: true
        cost:
          type: number
          format: double
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        evaluation_context:
          type: object
          properties:
            contexts:
              type: array
              items:
                type: string
            expected_output:
              type: string
          readOnly: true
        evaluator_latencies:
          type: array
          items:
            type: object
            properties:
              evaluator_name:
                type: string
              duration:
                type: number
          nullable: true
          readOnly: true
        executed_item_id:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        executed_item_name:
          type: string
          readOnly: true
        executed_item_version_id:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        execution_type:
          type: string
          readOnly: true
        id:
          type: string
          format: uuid
          readOnly: true
        justification:
          type: string
          readOnly: true
        llm_output:
          type: string
          readOnly: true
        model_call_duration:
          type: number
          format: double
        model_params:
          allOf:
          - $ref: '#/components/schemas/ModelParams'
          nullable: true
        model:
          type: string
          readOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/NestedUserDetails'
          readOnly: true
        parent_execution_log_id:
          type: string
          format: uuid
          nullable: true
        prompt_template:
          type: string
          readOnly: true
        rendered_prompt:
          type: string
          readOnly: true
        score:
          type: number
          format: double
          readOnly: true
          nullable: true
        tags:
          type: array
          items:
            type: string
          readOnly: true
        validation_results:
          type: array
          items:
            $ref: '#/components/schemas/SkillExecutionValidatorResult'
          readOnly: true
        variables:
          type: object
          additionalProperties:
            type: string
          readOnly: true
          nullable: true
      required:
      - chat_id
      - cost
      - created_at
      - evaluation_context
      - evaluator_latencies
      - executed_item_id
      - executed_item_name
      - executed_item_version_id
      - execution_type
      - id
      - justification
      - llm_output
      - model
      - model_call_duration
      - owner
      - prompt_template
      - rendered_prompt
      - score
      - tags
      - validation_results
      - variables
    ExecutionLogList:
      type: object
      properties:
        cost:
          type: number
          format: double
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        evaluation_context:
          type: object
          properties:
            contexts:
              type: array
              items:
                type: string
            expected_output:
              type: string
          description: The evaluation context used in the execution. Only included
            when explicitly requested with include=evaluation_context parameter.
          nullable: true
          readOnly: true
        executed_item_id:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        executed_item_name:
          type: string
          readOnly: true
        executed_item_version_id:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        execution_type:
          type: string
          readOnly: true
        id:
          type: string
          format: uuid
          readOnly: true
        llm_output:
          type: string
          nullable: true
          description: The raw output from the LLM model. Only included when explicitly
            requested with include=llm_output parameter.
          readOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/NestedUserDetails'
          readOnly: true
        parent_execution_log_id:
          type: string
          format: uuid
          nullable: true
        score:
          type: number
          format: double
          readOnly: true
          nullable: true
        tags:
          type: array
          items:
            type: string
          readOnly: true
        variables:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: The variables used in the execution. Only included when explicitly
            requested with include=variables parameter.
          readOnly: true
      required:
      - cost
      - created_at
      - evaluation_context
      - executed_item_id
      - executed_item_name
      - executed_item_version_id
      - execution_type
      - id
      - llm_output
      - owner
      - score
      - tags
      - variables
    GenerationModelParamsRequest:
      type: object
      properties:
        seed:
          type: integer
          nullable: true
        temperature:
          type: number
          format: double
          nullable: true
    ID:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
      required:
      - id
    InputVariable:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        name:
          type: string
          maxLength: 1000
        skill:
          type: string
          format: uuid
          readOnly: true
          nullable: true
      required:
      - created_at
      - id
      - name
      - skill
      - updated_at
    InputVariableRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 1000
      required:
      - name
    Judge:
      type: object
      properties:
        _meta:
          type: object
          additionalProperties: {}
          readOnly: true
          title: ' meta'
        created_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        evaluators:
          type: array
          items:
            $ref: '#/components/schemas/NestedEvaluator'
          readOnly: true
        files:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
              name:
                type: string
              id:
                type: string
                format: uuid
          readOnly: true
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 512
          minLength: 3
        objective:
          allOf:
          - $ref: '#/components/schemas/NestedVectorObjective'
          readOnly: true
        stage:
          type: string
          maxLength: 255
        inputs:
          type: object
          description: Schema defining the input parameters required for execution.
            The schema consists of variables defined in the prompt template (predicate)
            and special variables like functions, contexts, and expected output.
          additionalProperties:
            type: object
            required:
            - type
            properties:
              type:
                type: string
                enum:
                - string
                - array
              items:
                type: object
                required:
                - type
                properties:
                  type:
                    type: string
                    enum:
                    - string
                    - object
          example:
            response:
              type: string
            functions:
              type: array
              items:
                type: object
            contexts:
              type: array
              items:
                type: string
            my_custom_variable:
              type: string
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/JudgeStatusEnum'
          readOnly: true
      required:
      - _meta
      - created_at
      - evaluators
      - files
      - id
      - inputs
      - name
      - objective
      - status
    JudgeExecutionRequest:
      type: object
      properties:
        request:
          type: string
          default: ''
        response:
          type: string
          default: ''
        contexts:
          type: array
          items:
            type: string
            minLength: 1
        functions:
          type: array
          items:
            $ref: '#/components/schemas/EvaluatorExecutionFunctionsRequest'
        expected_output:
          type: string
          nullable: true
          maxLength: 3500000
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 1000
    JudgeExecutionResponse:
      type: object
      properties:
        evaluator_results:
          type: array
          items:
            $ref: '#/components/schemas/EvaluatorResult'
          description: List of results from each evaluator
      required:
      - evaluator_results
    JudgeGeneratorRequest:
      type: object
      properties:
        intent:
          type: string
          minLength: 10
          maxLength: 20000
        stage:
          type: string
          nullable: true
        visibility:
          allOf:
          - $ref: '#/components/schemas/VisibilityEnum'
          writeOnly: true
        file_id:
          type: string
          format: uuid
          nullable: true
        extra_contexts:
          type: object
          additionalProperties:
            type: string
            nullable: true
          writeOnly: true
          nullable: true
        strict:
          type: boolean
          default: true
        generating_model_params:
          allOf:
          - $ref: '#/components/schemas/GenerationModelParamsRequest'
          nullable: true
        judge_id:
          type: string
          format: uuid
          nullable: true
      required:
      - intent
      - visibility
    JudgeGeneratorResponse:
      type: object
      properties:
        judge_id:
          type: string
          format: uuid
        error_code:
          type: string
          nullable: true
      required:
      - judge_id
    JudgeInviteRequest:
      type: object
      properties:
        emails:
          type: array
          items:
            type: string
            format: email
            minLength: 1
          description: List of email addresses to send the invite to (maximum 10)
          maxItems: 10
          minItems: 1
        judge_url:
          type: string
          format: uri
          minLength: 1
          description: Full URL to the judge to include in the email
      required:
      - emails
      - judge_url
    JudgeList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        intent:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        status:
          allOf:
          - $ref: '#/components/schemas/JudgeStatusEnum'
          readOnly: true
        inputs:
          type: object
          description: Schema defining the input parameters required for execution.
            The schema consists of variables defined in the prompt template (predicate)
            and special variables like functions, contexts, and expected output.
          additionalProperties:
            type: object
            required:
            - type
            properties:
              type:
                type: string
                enum:
                - string
                - array
              items:
                type: object
                required:
                - type
                properties:
                  type:
                    type: string
                    enum:
                    - string
                    - object
          example:
            response:
              type: string
            functions:
              type: array
              items:
                type: object
            contexts:
              type: array
              items:
                type: string
            my_custom_variable:
              type: string
          readOnly: true
        evaluators:
          type: array
          items:
            $ref: '#/components/schemas/NestedEvaluator'
          readOnly: true
      required:
      - created_at
      - evaluators
      - id
      - inputs
      - intent
      - name
      - status
    JudgeRectifierRequestRequest:
      type: object
      properties:
        request:
          type: string
          default: ''
        response:
          type: string
          default: ''
        contexts:
          type: array
          items:
            type: string
            minLength: 1
        functions:
          type: array
          items:
            $ref: '#/components/schemas/EvaluatorExecutionFunctionsRequest'
        expected_output:
          type: string
          nullable: true
          maxLength: 3500000
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 1000
    JudgeRectifierResponse:
      type: object
      properties:
        evaluator_results:
          type: array
          items:
            $ref: '#/components/schemas/EvaluatorResult'
          description: List of results from each evaluator
        improved_response:
          type: string
          description: Improved response from rectifier
        original_response:
          type: string
          description: Original response before rectification
        original_evaluator_results:
          type: array
          items:
            $ref: '#/components/schemas/EvaluatorResult'
          description: List of evaluation results for the original response
      required:
      - evaluator_results
      - improved_response
      - original_evaluator_results
      - original_response
    JudgeRequest:
      type: object
      properties:
        evaluator_references:
          type: array
          items:
            $ref: '#/components/schemas/EvaluatorReferenceRequest'
          writeOnly: true
        intent:
          type: string
          writeOnly: true
          minLength: 1
          description: Intent for the judge
        name:
          type: string
          minLength: 3
          maxLength: 512
        stage:
          type: string
          maxLength: 255
      required:
      - intent
      - name
    JudgeStatusEnum:
      enum:
      - unlisted
      - listed
      - public
      - global
      type: string
      description: |-
        * `unlisted` - unlisted
        * `listed` - listed
        * `public` - public
        * `global` - global
    Model:
      type: object
      properties:
        default_key:
          type: string
          nullable: true
          maxLength: 4000
        id:
          type: string
          readOnly: true
        max_output_token_count:
          type: integer
          minimum: 800
        max_token_count:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        model:
          type: string
        name:
          type: string
          maxLength: 100
        url:
          type: string
          nullable: true
          maxLength: 1024
      required:
      - id
      - name
    ModelList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        owner:
          allOf:
          - $ref: '#/components/schemas/NestedUserDetails'
          readOnly: true
        provider:
          allOf:
          - $ref: '#/components/schemas/Provider'
          readOnly: true
          nullable: true
      required:
      - id
      - name
      - owner
      - provider
    ModelParams:
      type: object
      properties:
        temperature:
          type: number
          format: double
          maximum: 1
          minimum: 0
          nullable: true
    ModelParamsRequest:
      type: object
      properties:
        temperature:
          type: number
          format: double
          maximum: 1
          minimum: 0
          nullable: true
    ModelRequest:
      type: object
      properties:
        default_key:
          type: string
          nullable: true
          maxLength: 4000
        max_output_token_count:
          type: integer
          minimum: 800
        max_token_count:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        model:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
          maxLength: 100
        url:
          type: string
          nullable: true
          maxLength: 1024
      required:
      - name
    NestedEvaluator:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        objective:
          allOf:
          - $ref: '#/components/schemas/NestedEvaluatorObjective'
          readOnly: true
        is_root_evaluator:
          type: boolean
        model:
          type: string
          readOnly: true
        version_id:
          type: string
          format: uuid
      required:
      - id
      - is_root_evaluator
      - model
      - name
      - objective
      - version_id
    NestedEvaluatorObjective:
      type: object
      properties:
        intent:
          type: string
          readOnly: true
      required:
      - intent
    NestedEvaluatorRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
        is_root_evaluator:
          type: boolean
        version_id:
          type: string
          format: uuid
      required:
      - id
      - is_root_evaluator
      - name
      - version_id
    NestedObjectiveEvaluator:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 1000
        requires_expected_output:
          type: boolean
        requires_contexts:
          type: boolean
        requires_functions:
          type: boolean
      required:
      - id
    NestedObjectiveEvaluatorRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 1000
        requires_expected_output:
          type: boolean
        requires_contexts:
          type: boolean
        requires_functions:
          type: boolean
    NestedObjectiveList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        intent:
          type: string
          maxLength: 100000
        status:
          $ref: '#/components/schemas/StatusEnum'
        validators:
          type: array
          items:
            $ref: '#/components/schemas/ObjectiveValidator'
          readOnly: true
      required:
      - id
      - validators
    NestedUserDetails:
      type: object
      properties:
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        full_name:
          type: string
      required:
      - email
      - full_name
    NestedUserDetailsRequest:
      type: object
      properties:
        full_name:
          type: string
          minLength: 1
      required:
      - full_name
    NestedVectorObjective:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        intent:
          type: string
      required:
      - id
      - intent
    NestedVectorObjectiveRequest:
      type: object
      properties:
        intent:
          type: string
          minLength: 1
      required:
      - intent
    Objective:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        intent:
          type: string
          maxLength: 100000
        status:
          $ref: '#/components/schemas/StatusEnum'
        test_set:
          type: array
          items:
            type: array
            items:
              type: string
          readOnly: true
          nullable: true
          description: 'Deprecated: Use test_dataset_id instead.'
        validators:
          type: array
          items:
            $ref: '#/components/schemas/ObjectiveValidator'
        created_at:
          type: string
          format: date-time
          readOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/NestedUserDetails'
          readOnly: true
        version_id:
          type: string
          format: uuid
          readOnly: true
        test_dataset_id:
          type: string
          format: uuid
          nullable: true
        _meta:
          type: object
          additionalProperties: {}
          readOnly: true
          title: ' meta'
      required:
      - _meta
      - created_at
      - id
      - owner
      - test_set
      - version_id
    ObjectiveList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        intent:
          type: string
          maxLength: 100000
        status:
          $ref: '#/components/schemas/StatusEnum'
        owner:
          allOf:
          - $ref: '#/components/schemas/NestedUserDetails'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        validators:
          type: array
          items:
            $ref: '#/components/schemas/ObjectiveValidator'
          readOnly: true
        _meta:
          type: object
          additionalProperties: {}
          readOnly: true
          title: ' meta'
      required:
      - _meta
      - created_at
      - id
      - owner
      - validators
    ObjectiveRequest:
      type: object
      properties:
        intent:
          type: string
          minLength: 1
          maxLength: 100000
        status:
          $ref: '#/components/schemas/StatusEnum'
        validators:
          type: array
          items:
            $ref: '#/components/schemas/ObjectiveValidatorRequest'
        force_create:
          type: boolean
          writeOnly: true
          description: Force creation of a new objective. Applies only to PUT requests.
        test_dataset_id:
          type: string
          format: uuid
          nullable: true
    ObjectiveValidator:
      type: object
      properties:
        evaluator:
          allOf:
          - $ref: '#/components/schemas/NestedObjectiveEvaluator'
          readOnly: true
        threshold:
          type: number
          format: double
      required:
      - evaluator
    ObjectiveValidatorRequest:
      type: object
      properties:
        evaluator_id:
          type: string
          format: uuid
          writeOnly: true
        evaluator_name:
          type: string
          writeOnly: true
          minLength: 1
        threshold:
          type: number
          format: double
    PaginatedDataSetListList:
      type: object
      required:
      - results
      properties:
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/DataSetList'
    PaginatedEvaluatorList:
      type: object
      required:
      - results
      properties:
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/Evaluator'
    PaginatedEvaluatorListOutputList:
      type: object
      required:
      - results
      properties:
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/EvaluatorListOutput'
    PaginatedExecutionLogListList:
      type: object
      required:
      - results
      properties:
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionLogList'
    PaginatedJudgeListList:
      type: object
      required:
      - results
      properties:
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/JudgeList'
    PaginatedModelListList:
      type: object
      required:
      - results
      properties:
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/ModelList'
    PaginatedObjectiveList:
      type: object
      required:
      - results
      properties:
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/Objective'
    PaginatedObjectiveListList:
      type: object
      required:
      - results
      properties:
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/ObjectiveList'
    PatchedEvaluatorRequest:
      type: object
      properties:
        change_note:
          type: string
          nullable: true
        evaluator_demonstrations:
          type: array
          items:
            $ref: '#/components/schemas/EvaluatorDemonstrationsRequest'
          nullable: true
        input_variables:
          type: array
          items:
            $ref: '#/components/schemas/InputVariableRequest'
        model_params:
          allOf:
          - $ref: '#/components/schemas/ModelParamsRequest'
          nullable: true
        models:
          type: array
          items:
            type: string
            minLength: 1
          description: Primary model (index 0) and an optional list of fallback models
            to use if the primary model is not available. If not provided, a default
            model will be used.
        name:
          type: string
          minLength: 2
          maxLength: 1000
        objective_id:
          type: string
          format: uuid
          writeOnly: true
        objective_version_id:
          type: string
          format: uuid
          writeOnly: true
          nullable: true
          description: Optionally pin the Skill to a specific version of an Objective.
            If not provided, the latest version of the objective will be used and
            followed.
        overwrite:
          type: boolean
          writeOnly: true
          default: false
          description: Overwrite existing skill with the same name. Only for POST
            requests.
        prompt:
          type: string
          minLength: 1
          maxLength: 100000
        reference_variables:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceVariableRequest'
        status:
          $ref: '#/components/schemas/StatusEnum'
        system_message:
          type: string
    PatchedJudgeRequest:
      type: object
      properties:
        evaluator_references:
          type: array
          items:
            $ref: '#/components/schemas/EvaluatorReferenceRequest'
          writeOnly: true
        intent:
          type: string
          writeOnly: true
          minLength: 1
          description: Intent for the judge
        name:
          type: string
          minLength: 3
          maxLength: 512
        stage:
          type: string
          maxLength: 255
    PatchedModelRequest:
      type: object
      properties:
        default_key:
          type: string
          nullable: true
          maxLength: 4000
        max_output_token_count:
          type: integer
          minimum: 800
        max_token_count:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        model:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
          maxLength: 100
        url:
          type: string
          nullable: true
          maxLength: 1024
    PatchedObjectiveRequest:
      type: object
      properties:
        intent:
          type: string
          minLength: 1
          maxLength: 100000
        status:
          $ref: '#/components/schemas/StatusEnum'
        validators:
          type: array
          items:
            $ref: '#/components/schemas/ObjectiveValidatorRequest'
        force_create:
          type: boolean
          writeOnly: true
          description: Force creation of a new objective. Applies only to PUT requests.
        test_dataset_id:
          type: string
          format: uuid
          nullable: true
    Provider:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        logo_light:
          type: string
          format: uri
        logo_dark:
          type: string
          format: uri
        is_gdpr_compliant:
          type: boolean
      required:
      - id
      - name
    ReferenceVariable:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        dataset:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        name:
          type: string
          maxLength: 1000
        skill:
          type: string
          format: uuid
          readOnly: true
          nullable: true
      required:
      - created_at
      - dataset
      - id
      - name
      - skill
      - updated_at
    ReferenceVariableRequest:
      type: object
      properties:
        dataset:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 1000
      required:
      - dataset
      - name
    SkillExecutionValidatorResult:
      type: object
      properties:
        evaluator_id:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        evaluator_name:
          type: string
          readOnly: true
        result:
          type: number
          format: double
          readOnly: true
          nullable: true
        threshold:
          type: number
          format: double
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/ValidationResultStatus'
          readOnly: true
        justification:
          type: string
          readOnly: true
      required:
      - evaluator_id
      - evaluator_name
      - justification
      - result
      - status
      - threshold
    SkillTestDataRequest:
      type: object
      properties:
        test_data:
          type: array
          items:
            type: array
            items:
              type: string
              minLength: 1
          writeOnly: true
          nullable: true
        test_dataset_id:
          type: string
          writeOnly: true
          minLength: 1
        dataset_range:
          allOf:
          - $ref: '#/components/schemas/DatasetRangeRequest'
          nullable: true
          description: Specifies the range of dataset rows to use
    SkillTestInputRequest:
      type: object
      properties:
        test_data:
          type: array
          items:
            type: array
            items:
              type: string
              minLength: 1
          writeOnly: true
          nullable: true
        test_dataset_id:
          type: string
          writeOnly: true
          minLength: 1
        dataset_range:
          allOf:
          - $ref: '#/components/schemas/DatasetRangeRequest'
          nullable: true
          description: Specifies the range of dataset rows to use
        prompt:
          type: string
          minLength: 1
        reference_variables:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceVariableRequest'
          default: []
        input_variables:
          type: array
          items:
            $ref: '#/components/schemas/InputVariableRequest'
          default: []
        models:
          type: array
          items:
            type: string
            minLength: 1
        name:
          type: string
          nullable: true
          minLength: 1
        pii_filter:
          type: boolean
          default: false
        objective:
          allOf:
          - $ref: '#/components/schemas/ObjectiveRequest'
          nullable: true
        is_evaluator:
          type: boolean
          default: false
      required:
      - prompt
    SkillTypeEnum:
      enum:
      - managed
      - native
      type: string
      description: |-
        * `managed` - managed
        * `native` - native
    StatusChange:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/StatusChangeStatusEnum'
      required:
      - status
    StatusChangeRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/StatusChangeStatusEnum'
      required:
      - status
    StatusChangeStatusEnum:
      enum:
      - unlisted
      - listed
      type: string
      description: |-
        * `unlisted` - unlisted
        * `listed` - listed
    StatusEnum:
      enum:
      - unlisted
      - listed
      - public
      - public_unlisted
      type: string
      description: |-
        * `unlisted` - unlisted
        * `listed` - listed
        * `public` - public
        * `public_unlisted` - public_unlisted
    ValidationResultStatus:
      enum:
      - pending
      - finished
      type: string
      description: |-
        * `pending` - Pending
        * `finished` - Finished
    VisibilityEnum:
      enum:
      - global
      - listed
      - unlisted
      type: string
      description: |-
        * `global` - global
        * `listed` - listed
        * `unlisted` - unlisted
  securitySchemes:
    publicApiKey:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Api-Key"
      x-default: Api-Key <your-api-key>
servers:
- url: https://api.app.rootsignals.ai
